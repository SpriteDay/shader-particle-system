/*!
* Proton v1.0.7
* https://github.com/JackXie60/shader-particle-system
* Copyright 2022-2025, JackXie60
* Licensed under the MIT license
* http://www.opensource.org/licenses/mit-license
*
*/
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("three")):"function"==typeof define&&define.amd?define(["exports","three"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["shader-particle-system"]={},e.THREE)}(this,(function(e,t){"use strict";function r(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(r){if("default"!==r){var i=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,i.get?i:{enumerable:!0,get:function(){return e[r]}})}})),t.default=e,Object.freeze(t)}var i=r(t),a={types:{Boolean:"boolean",STRING:"string",NUMBER:"number",OBJECT:"object"},ensureTypedArg:(e,t,r)=>typeof e===t?e:r,ensureArrayTypedArg(e,t,r){if(Array.isArray(e)){for(let i=e.length-1;i>=0;--i)if(typeof e[i]!==t)return r;return e}return this.ensureTypedArg(e,t,r)},ensureInstanceOf:(e,t,r)=>t&&e instanceof t?e:void 0===e||t?r:e,ensureArrayInstanceOf(e,t,r){if(Array.isArray(e)){if(t)for(let i=e.length-1;i>=0;--i)if(e[i]instanceof t==!1)return r;return e}return this.ensureInstanceOf(e,t,r)},ensureValueOverLifetimeCompliance(e,t=3,r=3){t=t||3,r=r||3,!1===Array.isArray(e._value)&&(e._value=[e._value]),!1===Array.isArray(e._spread)&&(e._spread=[e._spread]);const i=this.clamp(e._value.length,t,r),a=this.clamp(e._spread.length,t,r),s=Math.max(i,a);e._value.length!==s&&(e._value=this.interpolateArray(e._value,s)),e._spread.length!==s&&(e._spread=this.interpolateArray(e._spread,s))},interpolateArray(e,t){const r=e.length,i=["object"==typeof e[0]?e[0].clone():e[0]],a=(r-1)/(t-1);for(let r=1;r<t-1;++r){const t=r*a,s=Math.floor(t),o=Math.ceil(t),n=t-s;i[r]=this.lerpTypeAgnostic(e[s],e[o],n)}return i.push("object"==typeof e[r-1]&&e[r-1].clone?e[r-1].clone():e[r-1]),i},clamp:(e,t,r)=>Math.max(t,Math.min(e,r)),zeroToEpsilon(e,t){const r=1e-5;let i=e;return i=t?Math.random()*r*10:r,e<0&&e>-1e-5&&(i=-i),i},lerpTypeAgnostic(e,t,r){const a=this.types;let s;return typeof e===a.NUMBER&&typeof t===a.NUMBER?e+(t-e)*r:e instanceof i.Vector2&&t instanceof i.Vector2?(s=e.clone(),s.x=this.lerp(e.x,t.x,r),s.y=this.lerp(e.y,t.y,r),s):e instanceof i.Vector3&&t instanceof i.Vector3?(s=e.clone(),s.x=this.lerp(e.x,t.x,r),s.y=this.lerp(e.y,t.y,r),s.z=this.lerp(e.z,t.z,r),s):e instanceof i.Vector4&&t instanceof i.Vector4?(s=e.clone(),s.x=this.lerp(e.x,t.x,r),s.y=this.lerp(e.y,t.y,r),s.z=this.lerp(e.z,t.z,r),s.w=this.lerp(e.w,t.w,r),s):e instanceof i.Color&&t instanceof i.Color?(s=e.clone(),s.r=this.lerp(e.r,t.r,r),s.g=this.lerp(e.g,t.g,r),s.b=this.lerp(e.b,t.b,r),s):void console.warn("Invalid argument types, or argument types do not match:",e,t)},lerp:(e,t,r)=>e+(t-e)*r,roundToNearestMultiple(e,t){let r=0;return 0===t?e:(r=Math.abs(e)%t,0===r?e:e<0?-(Math.abs(e)-r):e+t-r)},arrayValuesAreEqual(e){for(let t=0;t<e.length-1;++t)if(e[t]!==e[t+1])return!1;return!0},randomFloat:(e,t)=>e+t*(Math.random()-.5),randomVector3(e,t,r,i,a){let s=r.x+(Math.random()*i.x-.5*i.x),o=r.y+(Math.random()*i.y-.5*i.y),n=r.z+(Math.random()*i.z-.5*i.z);a&&(s=.5*-a.x+this.roundToNearestMultiple(s,a.x),o=.5*-a.y+this.roundToNearestMultiple(o,a.y),n=.5*-a.z+this.roundToNearestMultiple(n,a.z)),e.typedArray.setVec3Components(t,s,o,n)},randomColor(e,t,r,i){let a=r.r+Math.random()*i.x,s=r.g+Math.random()*i.y,o=r.b+Math.random()*i.z;a=this.clamp(a,0,1),s=this.clamp(s,0,1),o=this.clamp(o,0,1),e.typedArray.setVec3Components(t,a,s,o)},randomColorAsHex:function(e){const t=new i.Color;return function(r,i,a,s){const o=a.length,n=[];for(let r=0;r<o;++r){const i=s[r];t.copy(a[r]),t.r+=Math.random()*i.x-.5*i.x,t.g+=Math.random()*i.y-.5*i.y,t.b+=Math.random()*i.z-.5*i.z,t.r=e.clamp(t.r,0,1),t.g=e.clamp(t.g,0,1),t.b=e.clamp(t.b,0,1),n.push(t.getHex())}r.typedArray.setVec4Components(i,n[0]??0,n[1]??0,n[2]??0,n[3]??0)}}(void 0),randomVector3OnLine(e,t,r,i){const a=r.clone();a.lerp(i,Math.random()),e.typedArray.setVec3Components(t,a.x,a.y,a.z)},randomVector3OnSphere(e,t,r,i,a,s,o){const n=2*Math.random()-1,l=6.2832*Math.random(),u=Math.sqrt(1-n*n);let c=this.randomFloat(i,a),p=0,h=0,d=0;o&&(c=Math.round(c/o)*o),p=u*Math.cos(l)*c,h=u*Math.sin(l)*c,d=n*c,p*=s.x,h*=s.y,d*=s.z,p+=r.x,h+=r.y,d+=r.z,e.typedArray.setVec3Components(t,p,h,d)},seededRandom(e){const t=1e4*Math.sin(e);return t-(0|t)},randomVector3OnDisc(e,t,r,i,a,s,o){const n=6.2832*Math.random();let l=Math.abs(this.randomFloat(i,a)),u=0,c=0,p=0;o&&(l=Math.round(l/o)*o),u=Math.cos(n)*l,c=Math.sin(n)*l,u*=s.x,c*=s.y,u+=r.x,c+=r.y,p+=r.z,e.typedArray.setVec3Components(t,u,c,p)},randomDirectionVector3OnSphere:function(e){const t=new i.Vector3;return function(r,i,a,s,o,n,l,u){t.copy(n),t.x-=a,t.y-=s,t.z-=o,t.normalize().multiplyScalar(-e.randomFloat(l,u)),r.typedArray.setVec3Components(i,t.x,t.y,t.z)}}(void 0),randomDirectionVector3OnDisc:function(e){const t=new i.Vector3;return function(r,i,a,s,o,n,l,u){t.copy(n),t.x-=a,t.y-=s,t.z-=o,t.normalize().multiplyScalar(-e.randomFloat(l,u)),r.typedArray.setVec3Components(i,t.x,t.y,0)}}(void 0),getPackedRotationAxis:function(){const e=new i.Vector3,t=new i.Vector3,r=new i.Color,a=new i.Vector3(1,1,1);return function(i,s){return e.copy(i).normalize(),t.copy(s).normalize(),e.x+=.5*-s.x+Math.random()*s.x,e.y+=.5*-s.y+Math.random()*s.y,e.z+=.5*-s.z+Math.random()*s.z,e.normalize().add(a).multiplyScalar(.5),r.setRGB(e.x,e.y,e.z),r.getHex()}}()};const s=.0167;var o={distributions:{BOX:1,SPHERE:2,DISC:3,LINE:4},valueOverLifetimeLength:4},n=Object.freeze({__proto__:null,DEFAULT_SYSTEM_DELTA:s,default:o});class l{componentSize;size;TypedArrayConstructor;array;indexOffset;constructor(e,t,r,i){this.componentSize=r||1,this.size=t||1,this.TypedArrayConstructor=e||Float32Array,this.array=new this.TypedArrayConstructor(this.size*this.componentSize),this.indexOffset=i||0}setSize(e,t){const r=this.array.length;return t||(e*=this.componentSize),e<r?this.shrink(e):e>r?this.grow(e):void console.info("TypedArray is already of size:",e+".","Will not resize.")}shrink(e){return this.array=this.array.subarray(0,e),this.size=e,this}grow(e){const t=new this.TypedArrayConstructor(e);return t.set(this.array),this.array=t,this.size=e,this}splice(e,t){const r=e*this.componentSize,i=t*this.componentSize,a=[],s=this.array.length;for(let e=0;e<s;++e)(e<r||e>i)&&a.push(this.array[e]);return this.setFromArray(0,a),this}setFromArray(e,t){const r=e+t.length;return r>this.array.length?this.grow(r):r<this.array.length&&this.shrink(r),this.array.set(t,this.indexOffset+e),this}setVec2(e,t){return this.setVec2Components(e,t.x,t.y)}setVec2Components(e,t,r){const i=this.array,a=this.indexOffset+e*this.componentSize;return i[a]=t,i[a+1]=r,this}setVec3(e,t){return this.setVec3Components(e,t.x,t.y,t.z)}setVec3Components(e,t,r,i){const a=this.array,s=this.indexOffset+e*this.componentSize;return a[s]=t,a[s+1]=r,a[s+2]=i,this}setVec4(e,t){return this.setVec4Components(e,t.x,t.y,t.z,t.w)}setVec4Components(e,t,r,i,a){const s=this.array,o=this.indexOffset+e*this.componentSize;return s[o]=t,s[o+1]=r,s[o+2]=i,s[o+3]=a,this}setMat3(e,t){return this.setFromArray(this.indexOffset+e*this.componentSize,t.elements)}setMat4(e,t){return this.setFromArray(this.indexOffset+e*this.componentSize,t.elements)}setColor(e,t){return this.setVec3Components(e,t.r,t.g,t.b)}setNumber(e,t){return this.array[this.indexOffset+e*this.componentSize]=t,this}getValueAtIndex(e){return this.array[this.indexOffset+e]}getComponentValueAtIndex(e){return this.array.subarray(this.indexOffset+e*this.componentSize)}}class u{type;componentSize;arrayType;typedArray;bufferAttribute;dynamicBuffer;updateMin;updateMax;static typeSizeMap={f:1,v2:2,v3:3,v4:4,c:3,m3:9,m4:16};constructor(e,t,r){const i=u.typeSizeMap;this.type="string"==typeof e&&Object.prototype.hasOwnProperty.call(i,e)?e:"f",this.componentSize=i[this.type],this.arrayType=r||Float32Array,this.typedArray=null,this.bufferAttribute=null,this.dynamicBuffer=!!t,this.updateMin=0,this.updateMax=0}setUpdateRange(e,t){this.updateMin=Math.min(e*this.componentSize,this.updateMin*this.componentSize),this.updateMax=Math.max(t*this.componentSize,this.updateMax*this.componentSize)}flagUpdate(){const e=this.bufferAttribute;e&&this.typedArray&&(e.clearUpdateRanges(),e.addUpdateRange(this.updateMin,Math.min(this.updateMax-this.updateMin+this.componentSize,this.typedArray.array.length)),e.needsUpdate=!0)}resetUpdateRange(){this.updateMin=0,this.updateMax=0}resetDynamic(){this.bufferAttribute&&(this.bufferAttribute.usage=this.dynamicBuffer?i.DynamicDrawUsage:i.StaticDrawUsage)}splice(e,t){this.typedArray&&(this.typedArray.splice(e,t),this.forceUpdateAll())}forceUpdateAll(){this.bufferAttribute&&this.typedArray&&(this.bufferAttribute.array=this.typedArray.array,this.bufferAttribute.clearUpdateRanges(),this.bufferAttribute.addUpdateRange(0,-1),this.bufferAttribute.usage=i.StaticDrawUsage,this.bufferAttribute.needsUpdate=!0)}_ensureTypedArray(e){null!==this.typedArray&&this.typedArray.size===e*this.componentSize||(null!==this.typedArray&&this.typedArray.size!==e?this.typedArray.setSize(e):null===this.typedArray&&(this.typedArray=new l(this.arrayType,e,this.componentSize)))}_createBufferAttribute(e){if(this._ensureTypedArray(e),null!==this.bufferAttribute)return this.typedArray&&this.bufferAttribute.set(this.typedArray.array),void(this.bufferAttribute.needsUpdate=!0);this.bufferAttribute=new i.BufferAttribute(this.typedArray.array,this.componentSize),this.bufferAttribute.usage=this.dynamicBuffer?i.DynamicDrawUsage:i.StaticDrawUsage}getLength(){return null===this.typedArray?0:this.typedArray.array.length}}var c={defines:["#define PACKED_COLOR_SIZE 256.0","#define PACKED_COLOR_DIVISOR 255.0"].join("\n"),uniforms:["uniform float deltaTime;","uniform float runTime;","uniform sampler2D tex;","uniform vec4 textureAnimation;","uniform float scale;"].join("\n"),attributes:["attribute vec4 acceleration;","attribute vec3 velocity;","attribute vec4 rotation;","attribute vec3 rotationCenter;","attribute vec4 params;","attribute vec4 size;","attribute vec4 angle;","attribute vec4 color;","attribute vec4 opacity;"].join("\n"),varyings:["varying vec4 vColor;","#ifdef SHOULD_ROTATE_TEXTURE","    varying float vAngle;","#endif","#ifdef SHOULD_CALCULATE_SPRITE","    varying vec4 vSpriteSheet;","#endif"].join("\n"),branchAvoidanceFunctions:["float when_gt(float x, float y) {","    return max(sign(x - y), 0.0);","}","float when_lt(float x, float y) {","    return min( max(1.0 - sign(x - y), 0.0), 1.0 );","}","float when_eq( float x, float y ) {","    return 1.0 - abs( sign( x - y ) );","}","float when_ge(float x, float y) {","  return 1.0 - when_lt(x, y);","}","float when_le(float x, float y) {","  return 1.0 - when_gt(x, y);","}","float and(float a, float b) {","    return a * b;","}","float or(float a, float b) {","    return min(a + b, 1.0);","}"].join("\n"),unpackColor:["vec3 unpackColor( in float hex ) {","   vec3 c = vec3( 0.0 );","   float r = mod( (hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );","   float g = mod( (hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );","   float b = mod( hex, PACKED_COLOR_SIZE );","   c.r = r / PACKED_COLOR_DIVISOR;","   c.g = g / PACKED_COLOR_DIVISOR;","   c.b = b / PACKED_COLOR_DIVISOR;","   return c;","}"].join("\n"),unpackRotationAxis:["vec3 unpackRotationAxis( in float hex ) {","   vec3 c = vec3( 0.0 );","   float r = mod( (hex / PACKED_COLOR_SIZE / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );","   float g = mod( (hex / PACKED_COLOR_SIZE), PACKED_COLOR_SIZE );","   float b = mod( hex, PACKED_COLOR_SIZE );","   c.r = r / PACKED_COLOR_DIVISOR;","   c.g = g / PACKED_COLOR_DIVISOR;","   c.b = b / PACKED_COLOR_DIVISOR;","   c *= vec3( 2.0 );","   c -= vec3( 1.0 );","   return c;","}"].join("\n"),floatOverLifetime:["float getFloatOverLifetime( in float positionInTime, in vec4 attr ) {","    highp float value = 0.0;","    float deltaAge = positionInTime * float( VALUE_OVER_LIFETIME_LENGTH - 1 );","    float fIndex = 0.0;","    float shouldApplyValue = 0.0;","    value += attr[ 0 ] * when_eq( deltaAge, 0.0 );","","    for( int i = 0; i < VALUE_OVER_LIFETIME_LENGTH - 1; ++i ) {","       fIndex = float( i );","       shouldApplyValue = and( when_gt( deltaAge, fIndex ), when_le( deltaAge, fIndex + 1.0 ) );","       value += shouldApplyValue * mix( attr[ i ], attr[ i + 1 ], deltaAge - fIndex );","    }","","    return value;","}"].join("\n"),colorOverLifetime:["vec3 getColorOverLifetime( in float positionInTime, in vec3 color1, in vec3 color2, in vec3 color3, in vec3 color4 ) {","    vec3 value = vec3( 0.0 );","    value.x = getFloatOverLifetime( positionInTime, vec4( color1.x, color2.x, color3.x, color4.x ) );","    value.y = getFloatOverLifetime( positionInTime, vec4( color1.y, color2.y, color3.y, color4.y ) );","    value.z = getFloatOverLifetime( positionInTime, vec4( color1.z, color2.z, color3.z, color4.z ) );","    return value;","}"].join("\n"),paramFetchingFunctions:["float getAlive() {","   return params.x;","}","float getAge() {","   return params.y;","}","float getMaxAge() {","   return params.z;","}","float getWiggle() {","   return params.w;","}"].join("\n"),forceFetchingFunctions:["vec4 getPosition( in float age ) {","   return modelViewMatrix * vec4( position, 1.0 );","}","vec3 getVelocity( in float age ) {","   return velocity * age;","}","vec3 getAcceleration( in float age ) {","   return acceleration.xyz * age;","}"].join("\n"),rotationFunctions:["#ifdef SHOULD_ROTATE_PARTICLES","   mat4 getRotationMatrix( in vec3 axis, in float angle) {","       axis = normalize(axis);","       float s = sin(angle);","       float c = cos(angle);","       float oc = 1.0 - c;","","       return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,","                   oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,","                   oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,","                   0.0,                                0.0,                                0.0,                                1.0);","   }","","   vec3 getRotation( in vec3 pos, in float positionInTime ) {","      if( rotation.y == 0.0 ) {","           return pos;","      }","","      vec3 axis = unpackRotationAxis( rotation.x );","      vec3 center = rotationCenter;","      vec3 translated;","      mat4 rotationMatrix;","      float angle = 0.0;","      angle += when_eq( rotation.z, 0.0 ) * rotation.y;","      angle += when_gt( rotation.z, 0.0 ) * mix( 0.0, rotation.y, positionInTime );","      translated = rotationCenter - pos;","      rotationMatrix = getRotationMatrix( axis, angle );","      return center - vec3( rotationMatrix * vec4( translated, 0.0 ) );","   }","#endif"].join("\n"),rotateTexture:["    vec2 vUv = vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y );","","    #ifdef SHOULD_ROTATE_TEXTURE","       float x = gl_PointCoord.x - 0.5;","       float y = 1.0 - gl_PointCoord.y - 0.5;","       float c = cos( -vAngle );","       float s = sin( -vAngle );","       vUv = vec2( c * x + s * y + 0.5, c * y - s * x + 0.5 );","    #endif","","    #ifdef SHOULD_CALCULATE_SPRITE","        float framesX = vSpriteSheet.x;","        float framesY = vSpriteSheet.y;","        float columnNorm = vSpriteSheet.z;","        float rowNorm = vSpriteSheet.w;","        vUv.x = gl_PointCoord.x * framesX + columnNorm;","        vUv.y = 1.0 - (gl_PointCoord.y * framesY + rowNorm);","    #endif","","    vec4 rotatedTexture = texture2D( tex, vUv );"].join("\n")},p={vertex:[c.defines,c.uniforms,c.attributes,c.varyings,i.ShaderChunk.common,i.ShaderChunk.logdepthbuf_pars_vertex,i.ShaderChunk.fog_pars_fragment,c.branchAvoidanceFunctions,c.unpackColor,c.unpackRotationAxis,c.floatOverLifetime,c.colorOverLifetime,c.paramFetchingFunctions,c.forceFetchingFunctions,c.rotationFunctions,"void main() {","    highp float age = getAge();","    highp float alive = getAlive();","    highp float maxAge = getMaxAge();","    highp float positionInTime = (age / maxAge);","    highp float isAlive = when_gt( alive, 0.0 );","    #ifdef SHOULD_WIGGLE_PARTICLES","        float wiggleAmount = positionInTime * getWiggle();","        float wiggleSin = isAlive * sin( wiggleAmount );","        float wiggleCos = isAlive * cos( wiggleAmount );","    #endif","    vec3 vel = getVelocity( age );","    vec3 accel = getAcceleration( age );","    vec3 force = vec3( 0.0 );","    vec3 pos = vec3( position );","    float drag = 1.0 - (positionInTime * 0.5) * acceleration.w;","    force += vel;","    force *= drag;","    force += accel * age;","    pos += force;","    #ifdef SHOULD_WIGGLE_PARTICLES","        pos.x += wiggleSin;","        pos.y += wiggleCos;","        pos.z += wiggleSin;","    #endif","    #ifdef SHOULD_ROTATE_PARTICLES","        pos = getRotation( pos, positionInTime );","    #endif","    vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );","    highp float pointSize = getFloatOverLifetime( positionInTime, size ) * isAlive;","    #ifdef HAS_PERSPECTIVE","        float perspective = scale / length( mvPosition.xyz );","    #else","        float perspective = 1.0;","    #endif","    float pointSizePerspective = pointSize * perspective;","    #ifdef COLORIZE","       vec3 c = isAlive * getColorOverLifetime(","           positionInTime,","           unpackColor( color.x ),","           unpackColor( color.y ),","           unpackColor( color.z ),","           unpackColor( color.w )","       );","    #else","       vec3 c = vec3(1.0);","    #endif","    float o = isAlive * getFloatOverLifetime( positionInTime, opacity );","    vColor = vec4( c, o );","    #ifdef SHOULD_ROTATE_TEXTURE","        vAngle = isAlive * getFloatOverLifetime( positionInTime, angle );","    #endif","    #ifdef SHOULD_CALCULATE_SPRITE","        float framesX = textureAnimation.x;","        float framesY = textureAnimation.y;","        float loopCount = textureAnimation.w;","        float totalFrames = textureAnimation.z;","        float frameNumber = mod( (positionInTime * loopCount) * totalFrames, totalFrames );","        float column = floor(mod( frameNumber, framesX ));","        float row = floor( (frameNumber - column) / framesX );","        float columnNorm = column / framesX;","        float rowNorm = row / framesY;","        vSpriteSheet.x = 1.0 / framesX;","        vSpriteSheet.y = 1.0 / framesY;","        vSpriteSheet.z = columnNorm;","        vSpriteSheet.w = rowNorm;","    #endif","    gl_PointSize = pointSizePerspective;","    gl_Position = projectionMatrix * mvPosition;",i.ShaderChunk.logdepthbuf_vertex,"}"].join("\n"),fragment:[c.uniforms,i.ShaderChunk.common,i.ShaderChunk.fog_pars_fragment,i.ShaderChunk.logdepthbuf_pars_fragment,c.varyings,c.branchAvoidanceFunctions,"void main() {","    vec3 outgoingLight = vColor.xyz;","    ","    #ifdef ALPHATEST","       if ( vColor.w < float(ALPHATEST) ) discard;","    #endif",c.rotateTexture,i.ShaderChunk.logdepthbuf_fragment,"    outgoingLight = vColor.xyz * rotatedTexture.xyz;","    gl_FragColor = vec4( outgoingLight.xyz, rotatedTexture.w * vColor.w );",i.ShaderChunk.fog_fragment,"}"].join("\n")};class h{uuid;type;position;velocity;acceleration;drag;wiggle;rotation;maxAge;color;opacity;size;angle;particleCount;duration;isStatic;activeMultiplier;direction;alive;particlesPerSecond;activationIndex;attributeOffset;age;activeParticleCount;group;attributes;paramsArray;resetFlags;updateFlags;updateCounts;updateMap;bufferUpdateRanges;attributeKeys;attributeCount;activationEnd;constructor(e){const t=a.types,r=o.valueOverLifetimeLength;(e=a.ensureTypedArg(e,t.OBJECT,{})).position=a.ensureTypedArg(e.position,t.OBJECT,{}),e.velocity=a.ensureTypedArg(e.velocity,t.OBJECT,{}),e.acceleration=a.ensureTypedArg(e.acceleration,t.OBJECT,{}),e.radius=a.ensureTypedArg(e.radius,t.OBJECT,{}),e.drag=a.ensureTypedArg(e.drag,t.OBJECT,{}),e.rotation=a.ensureTypedArg(e.rotation,t.OBJECT,{}),e.color=a.ensureTypedArg(e.color,t.OBJECT,{}),e.opacity=a.ensureTypedArg(e.opacity,t.OBJECT,{}),e.size=a.ensureTypedArg(e.size,t.OBJECT,{}),e.angle=a.ensureTypedArg(e.angle,t.OBJECT,{}),e.wiggle=a.ensureTypedArg(e.wiggle,t.OBJECT,{}),e.maxAge=a.ensureTypedArg(e.maxAge,t.OBJECT,{}),e.onParticleSpawn&&console.warn("onParticleSpawn has been removed. Please set properties directly to alter values at runtime."),this.uuid=i.MathUtils.generateUUID(),this.type=a.ensureTypedArg(e.type,t.NUMBER,o.distributions.BOX),this.position={_value:a.ensureInstanceOf(e.position.value,i.Vector3,new i.Vector3),_spread:a.ensureInstanceOf(e.position.spread,i.Vector3,new i.Vector3),_spreadClamp:a.ensureInstanceOf(e.position.spreadClamp,i.Vector3,new i.Vector3),_distribution:a.ensureTypedArg(e.position.distribution,t.NUMBER,this.type),_randomise:a.ensureTypedArg(e.position.randomise,t.Boolean,!1),_radius:a.ensureTypedArg(e.position.radius,t.NUMBER,10),_radiusScale:a.ensureInstanceOf(e.position.radiusScale,i.Vector3,new i.Vector3(1,1,1)),_distributionClamp:a.ensureTypedArg(e.position.distributionClamp,t.NUMBER,0)},this.velocity={_value:a.ensureInstanceOf(e.velocity.value,i.Vector3,new i.Vector3),_spread:a.ensureInstanceOf(e.velocity.spread,i.Vector3,new i.Vector3),_distribution:a.ensureTypedArg(e.velocity.distribution,t.NUMBER,this.type),_randomise:a.ensureTypedArg(e.position.randomise,t.Boolean,!1)},this.acceleration={_value:a.ensureInstanceOf(e.acceleration.value,i.Vector3,new i.Vector3),_spread:a.ensureInstanceOf(e.acceleration.spread,i.Vector3,new i.Vector3),_distribution:a.ensureTypedArg(e.acceleration.distribution,t.NUMBER,this.type),_randomise:a.ensureTypedArg(e.position.randomise,t.Boolean,!1)},this.drag={_value:a.ensureTypedArg(e.drag.value,t.NUMBER,0),_spread:a.ensureTypedArg(e.drag.spread,t.NUMBER,0),_randomise:a.ensureTypedArg(e.position.randomise,t.Boolean,!1)},this.wiggle={_value:a.ensureTypedArg(e.wiggle.value,t.NUMBER,0),_spread:a.ensureTypedArg(e.wiggle.spread,t.NUMBER,0)},this.rotation={_axis:a.ensureInstanceOf(e.rotation.axis,i.Vector3,new i.Vector3(0,1,0)),_axisSpread:a.ensureInstanceOf(e.rotation.axisSpread,i.Vector3,new i.Vector3),_angle:a.ensureTypedArg(e.rotation.angle,t.NUMBER,0),_angleSpread:a.ensureTypedArg(e.rotation.angleSpread,t.NUMBER,0),_static:a.ensureTypedArg(e.rotation.static,t.Boolean,!1),_center:a.ensureInstanceOf(e.rotation.center,i.Vector3,this.position._value.clone()),_randomise:a.ensureTypedArg(e.position.randomise,t.Boolean,!1)},this.maxAge={_value:a.ensureTypedArg(e.maxAge.value,t.NUMBER,2),_spread:a.ensureTypedArg(e.maxAge.spread,t.NUMBER,0)},this.color={_value:a.ensureArrayInstanceOf(e.color.value,i.Color,new i.Color),_spread:a.ensureArrayInstanceOf(e.color.spread,i.Vector3,new i.Vector3),_randomise:a.ensureTypedArg(e.position.randomise,t.Boolean,!1)},this.opacity={_value:a.ensureArrayTypedArg(e.opacity.value,t.NUMBER,1),_spread:a.ensureArrayTypedArg(e.opacity.spread,t.NUMBER,0),_randomise:a.ensureTypedArg(e.position.randomise,t.Boolean,!1)},this.size={_value:a.ensureArrayTypedArg(e.size.value,t.NUMBER,1),_spread:a.ensureArrayTypedArg(e.size.spread,t.NUMBER,0),_randomise:a.ensureTypedArg(e.position.randomise,t.Boolean,!1)},this.angle={_value:a.ensureArrayTypedArg(e.angle.value,t.NUMBER,0),_spread:a.ensureArrayTypedArg(e.angle.spread,t.NUMBER,0),_randomise:a.ensureTypedArg(e.position.randomise,t.Boolean,!1)},this.particleCount=a.ensureTypedArg(e.particleCount,t.NUMBER,100),this.duration=a.ensureTypedArg(e.duration,t.NUMBER,null),this.isStatic=a.ensureTypedArg(e.isStatic,t.Boolean,!1),this.activeMultiplier=a.ensureTypedArg(e.activeMultiplier,t.NUMBER,1),this.direction=a.ensureTypedArg(e.direction,t.NUMBER,1),this.alive=a.ensureTypedArg(e.alive,t.Boolean,!0),this.particlesPerSecond=0,this.activationIndex=0,this.activationEnd=0,this.attributeOffset=0,this.age=0,this.activeParticleCount=0,this.group=null,this.attributes=null,this.paramsArray=null,this.resetFlags={position:a.ensureTypedArg(e.position.randomise,t.Boolean,!1)||a.ensureTypedArg(e.radius.randomise,t.Boolean,!1),velocity:a.ensureTypedArg(e.velocity.randomise,t.Boolean,!1),acceleration:a.ensureTypedArg(e.acceleration.randomise,t.Boolean,!1)||a.ensureTypedArg(e.drag.randomise,t.Boolean,!1),rotation:a.ensureTypedArg(e.rotation.randomise,t.Boolean,!1),rotationCenter:a.ensureTypedArg(e.rotation.randomise,t.Boolean,!1),size:a.ensureTypedArg(e.size.randomise,t.Boolean,!1),color:a.ensureTypedArg(e.color.randomise,t.Boolean,!1),opacity:a.ensureTypedArg(e.opacity.randomise,t.Boolean,!1),angle:a.ensureTypedArg(e.angle.randomise,t.Boolean,!1)},this.updateFlags={},this.updateCounts={},this.updateMap={maxAge:"params",position:"position",velocity:"velocity",acceleration:"acceleration",drag:"acceleration",wiggle:"params",rotation:"rotation",size:"size",color:"color",opacity:"opacity",angle:"angle"};for(const e in this.updateMap)if(this.updateMap.hasOwnProperty(e)){this.updateCounts[this.updateMap[e]]=0,this.updateFlags[this.updateMap[e]]=!1;const t=this[e];if(null===t||"object"!=typeof t)continue;this._createGetterSetters(t,e)}this.bufferUpdateRanges={},this.attributeKeys=null,this.attributeCount=0,a.ensureValueOverLifetimeCompliance(this.color,r,r),a.ensureValueOverLifetimeCompliance(this.opacity,r,r),a.ensureValueOverLifetimeCompliance(this.size,r,r),a.ensureValueOverLifetimeCompliance(this.angle,r,r)}_createGetterSetters(e,t){const r=this;Object.keys(e).forEach((i=>{const s=i.replace("_","");Object.defineProperty(e,s,{get(){return this[i]},set(e){const s=r.updateMap[t],n=this[i],l=o.valueOverLifetimeLength;"_rotationCenter"===i?(r.updateFlags.rotationCenter=!0,r.updateCounts.rotationCenter=0):"_randomise"===i?r.resetFlags[s]=!!e:(r.updateFlags[s]=!0,r.updateCounts[s]=0),r.group&&r.group._updateDefines(),this[i]=e,Array.isArray(n)&&a.ensureValueOverLifetimeCompliance(r[t],l,l)}})}))}_setBufferUpdateRanges(e){this.attributeKeys=e,this.attributeCount=e.length;for(let t=this.attributeCount-1;t>=0;--t)this.bufferUpdateRanges[e[t]]={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY}}_calculatePPSValue(e){const t=this.particleCount;this.duration?this.particlesPerSecond=t/(e<this.duration?e:this.duration):this.particlesPerSecond=t/e}_setAttributeOffset(e){this.attributeOffset=e,this.activationIndex=e,this.activationEnd=e+this.particleCount}_assignValue(e,t){switch(e){case"position":this._assignPositionValue(t);break;case"velocity":case"acceleration":this._assignForceValue(t,e);break;case"size":case"opacity":this._assignAbsLifetimeValue(t,e);break;case"angle":this._assignAngleValue(t);break;case"params":this._assignParamsValue(t);break;case"rotation":this._assignRotationValue(t);break;case"color":this._assignColorValue(t)}}_assignPositionValue(e){if(!this.attributes)return;const t=o.distributions,r=this.position,i=this.attributes.position,s=r._value,n=r._spread;switch(r._distribution){case t.BOX:a.randomVector3(i,e,s,n,r._spreadClamp);break;case t.SPHERE:a.randomVector3OnSphere(i,e,s,r._radius,r._spread.x,r._radiusScale,r._spreadClamp.x);break;case t.DISC:a.randomVector3OnDisc(i,e,s,r._radius,r._spread.x,r._radiusScale,r._spreadClamp.x);break;case t.LINE:a.randomVector3OnLine(i,e,s,n)}}_assignForceValue(e,t){if(!this.attributes)return;const r=o.distributions,i=this[t],s=i._value,n=i._spread;let l,u,c,p,h;switch(i._distribution){case r.BOX:a.randomVector3(this.attributes[t],e,s,n);break;case r.SPHERE:l=this.attributes.position.typedArray.array,h=3*e,u=l[h],c=l[h+1],p=l[h+2],a.randomDirectionVector3OnSphere(this.attributes[t],e,u,c,p,this.position._value,i._value.x,i._spread.x);break;case r.DISC:l=this.attributes.position.typedArray.array,h=3*e,u=l[h],c=l[h+1],p=l[h+2],a.randomDirectionVector3OnDisc(this.attributes[t],e,u,c,p,this.position._value,i._value.x,i._spread.x);break;case r.LINE:a.randomVector3OnLine(this.attributes[t],e,s,n)}if("acceleration"===t){const t=a.clamp(a.randomFloat(this.drag._value,this.drag._spread),0,1);this.attributes.acceleration.typedArray.array[4*e+3]=t}}_assignAbsLifetimeValue(e,t){if(!this.attributes)return;const r=this.attributes[t].typedArray,i=this[t];let s;if(Array.isArray(i._value)&&Array.isArray(i._spread)&&a.arrayValuesAreEqual(i._value)&&a.arrayValuesAreEqual(i._spread))s=Math.abs(a.randomFloat(i._value[0],i._spread[0])),r.setVec4Components(e,s,s,s,s);else{const t=Array.isArray(i._value)?i._value[0]:i._value,s=Array.isArray(i._value)?i._value[1]:i._value,o=Array.isArray(i._value)?i._value[2]:i._value,n=Array.isArray(i._value)?i._value[3]:i._value,l=Array.isArray(i._spread)?i._spread[0]:i._spread,u=Array.isArray(i._spread)?i._spread[1]:i._spread,c=Array.isArray(i._spread)?i._spread[2]:i._spread,p=Array.isArray(i._spread)?i._spread[3]:i._spread;r.setVec4Components(e,Math.abs(a.randomFloat(t,l)),Math.abs(a.randomFloat(s,u)),Math.abs(a.randomFloat(o,c)),Math.abs(a.randomFloat(n,p)))}}_assignAngleValue(e){if(!this.attributes)return;const t=this.attributes.angle.typedArray,r=this.angle;let i;if(Array.isArray(r._value)&&Array.isArray(r._spread)&&a.arrayValuesAreEqual(r._value)&&a.arrayValuesAreEqual(r._spread))i=a.randomFloat(r._value[0],r._spread[0]),t.setVec4Components(e,i,i,i,i);else{const i=Array.isArray(r._value)?r._value[0]:r._value,s=Array.isArray(r._value)?r._value[1]:r._value,o=Array.isArray(r._value)?r._value[2]:r._value,n=Array.isArray(r._value)?r._value[3]:r._value,l=Array.isArray(r._spread)?r._spread[0]:r._spread,u=Array.isArray(r._spread)?r._spread[1]:r._spread,c=Array.isArray(r._spread)?r._spread[2]:r._spread,p=Array.isArray(r._spread)?r._spread[3]:r._spread;t.setVec4Components(e,a.randomFloat(i,l),a.randomFloat(s,u),a.randomFloat(o,c),a.randomFloat(n,p))}}_assignParamsValue(e){this.attributes&&this.attributes.params.typedArray.setVec4Components(e,this.isStatic?1:0,0,Math.abs(a.randomFloat(this.maxAge._value,this.maxAge._spread)),a.randomFloat(this.wiggle._value,this.wiggle._spread))}_assignRotationValue(e){this.attributes&&(this.attributes.rotation.typedArray.setVec3Components(e,a.getPackedRotationAxis(this.rotation._axis,this.rotation._axisSpread),a.randomFloat(this.rotation._angle,this.rotation._angleSpread),this.rotation._static?0:1),this.attributes.rotationCenter.typedArray.setVec3(e,this.rotation._center))}_assignColorValue(e){this.attributes&&Array.isArray(this.color._value)&&Array.isArray(this.color._spread)&&a.randomColorAsHex(this.attributes.color,e,this.color._value,this.color._spread)}_resetParticle(e){const t=this.resetFlags,r=this.updateFlags,i=this.updateCounts,a=this.attributeKeys;let s,o;if(a)for(let n=this.attributeCount-1;n>=0;--n)s=a[n],o=r[s],!0!==t[s]&&!0!==o||(this._assignValue(s,e),this._updateAttributeUpdateRange(s,e),!0===o&&i[s]===this.particleCount?(r[s]=!1,i[s]=0):!0===o&&++i[s])}_updateAttributeUpdateRange(e,t){const r=this.bufferUpdateRanges[e];r.min=Math.min(t,r.min),r.max=Math.max(t,r.max)}_resetBufferRanges(){const e=this.bufferUpdateRanges,t=this.attributeKeys;if(t)for(let r=t.length-1;r>=0;--r){const i=t[r];e[i].min=Number.POSITIVE_INFINITY,e[i].max=Number.NEGATIVE_INFINITY}}_onRemove(){this.particlesPerSecond=0,this.attributeOffset=0,this.activationIndex=0,this.activeParticleCount=0,this.group=null,this.attributes=null,this.paramsArray=null,this.age=0}_decrementParticleCount(){--this.activeParticleCount}_incrementParticleCount(){++this.activeParticleCount}_checkParticleAges(e,t,r,i){for(let a,s,o,n,l=t-1;l>=e;--l)a=4*l,n=r[a],0!==n&&(o=r[a+1],s=r[a+2],1===this.direction?(o+=i,o>=s&&(o=0,n=0,this._decrementParticleCount())):(o-=i,o<=0&&(o=s,n=0,this._decrementParticleCount())),r[a]=n,r[a+1]=o,this._updateAttributeUpdateRange("params",l))}_activateParticles(e,t,r,i){const a=this.direction;for(let s,o,n=e;n<t;++n)s=4*n,0!==r[s]&&1!==this.particleCount||(this._incrementParticleCount(),r[s]=1,this._resetParticle(n),o=i*(n-e),r[s+1]=-1===a?r[s+2]-o:o,this._updateAttributeUpdateRange("params",n))}update(e){if(this.isStatic)return;null===this.paramsArray&&this.attributes&&(this.paramsArray=this.attributes.params.typedArray.array);const t=this.attributeOffset,r=t+this.particleCount,i=this.paramsArray,a=this.particlesPerSecond*this.activeMultiplier*e,s=this.activationIndex;if(this._resetBufferRanges(),this._checkParticleAges(t,r,i,e),!1===this.alive)return void(this.age=0);if(null!==this.duration&&this.age>this.duration)return this.alive=!1,void(this.age=0);const o=1===this.particleCount?s:0|s,n=Math.min(o+a,this.activationEnd),l=n-this.activationIndex|0,u=l>0?e/l:0;this._activateParticles(o,n,i,u),this.activationIndex+=a,this.activationIndex>r&&(this.activationIndex=t),this.age+=e}reset(e){if(this.age=0,this.alive=!1,!0===e){const e=this.attributeOffset,t=e+this.particleCount,r=this.paramsArray;if(!this.attributes)return;const i=this.attributes.params.bufferAttribute;for(let i,a=t-1;a>=e;--a){if(i=4*a,!r)return;r[i]=0,r[i+1]=0}i.updateRange.offset=0,i.updateRange.count=-1,i.needsUpdate=!0}return this}enable(){return this.alive=!0,this}disable(){return this.alive=!1,this}remove(){return null!==this.group?this.group.removeEmitter(this):console.error("Emitter does not belong to a group, cannot remove."),this}}class d{uuid;fixedTimeStep;texture;textureFrames;textureFrameCount;textureLoop;hasPerspective;colorize;maxParticleCount;blending;transparent;alphaTest;depthWrite;depthTest;fog;scale;emitters;emitterIDs;_pool;_poolCreationSettings;_createNewWhenPoolEmpty;_attributesNeedRefresh;_attributesNeedDynamicReset;particleCount;uniforms;defines;attributes;attributeKeys;attributeCount;material;geometry;mesh;constructor(e){const t=a.types;(e=a.ensureTypedArg(e,t.OBJECT,{})).texture=a.ensureTypedArg(e.texture,t.OBJECT,{}),this.uuid=i.MathUtils.generateUUID(),this.fixedTimeStep=a.ensureTypedArg(e.fixedTimeStep,t.NUMBER,s),this.texture=e.texture.value||null,this.textureFrames=e.texture.frames||new i.Vector2(1,1),this.textureFrameCount=a.ensureTypedArg(e.texture.frameCount,t.NUMBER,this.textureFrames.x*this.textureFrames.y),this.textureLoop=a.ensureTypedArg(e.texture.loop,t.NUMBER,1),this.textureFrames.max(new i.Vector2(1,1)),this.hasPerspective=a.ensureTypedArg(e.hasPerspective,t.Boolean,!0),this.colorize=a.ensureTypedArg(e.colorize,t.Boolean,!0),this.maxParticleCount=a.ensureTypedArg(e.maxParticleCount,t.NUMBER,null),this.blending=a.ensureTypedArg(e.blending,t.NUMBER,i.AdditiveBlending),this.transparent=a.ensureTypedArg(e.transparent,t.Boolean,!0),this.alphaTest=a.ensureTypedArg(e.alphaTest,t.NUMBER,0),this.depthWrite=a.ensureTypedArg(e.depthWrite,t.Boolean,!1),this.depthTest=a.ensureTypedArg(e.depthTest,t.Boolean,!0),this.fog=a.ensureTypedArg(e.fog,t.Boolean,!0),this.scale=a.ensureTypedArg(e.scale,t.NUMBER,300),this.emitters=[],this.emitterIDs=[],this._pool=[],this._poolCreationSettings=null,this._createNewWhenPoolEmpty=0,this._attributesNeedRefresh=!1,this._attributesNeedDynamicReset=!1,this.particleCount=0,this.uniforms={tex:{type:"t",value:this.texture},textureAnimation:{type:"v4",value:new i.Vector4(this.textureFrames.x,this.textureFrames.y,this.textureFrameCount,Math.max(Math.abs(this.textureLoop),1))},fogColor:{type:"c",value:this.fog?new i.Color:null},fogNear:{type:"f",value:10},fogFar:{type:"f",value:200},fogDensity:{type:"f",value:.5},deltaTime:{type:"f",value:0},runTime:{type:"f",value:0},scale:{type:"f",value:this.scale}},this.defines={HAS_PERSPECTIVE:this.hasPerspective,COLORIZE:this.colorize,VALUE_OVER_LIFETIME_LENGTH:o.valueOverLifetimeLength,SHOULD_ROTATE_TEXTURE:!1,SHOULD_ROTATE_PARTICLES:!1,SHOULD_WIGGLE_PARTICLES:!1,SHOULD_CALCULATE_SPRITE:this.textureFrames.x>1||this.textureFrames.y>1},this.attributes={position:new u("v3",!0),acceleration:new u("v4",!0),velocity:new u("v3",!0),rotation:new u("v4",!0),rotationCenter:new u("v3",!0),params:new u("v4",!0),size:new u("v4",!0),angle:new u("v4",!0),color:new u("v4",!0),opacity:new u("v4",!0)},this.attributeKeys=Object.keys(this.attributes),this.attributeCount=this.attributeKeys.length,this.material=new i.ShaderMaterial({uniforms:this.uniforms,vertexShader:p.vertex,fragmentShader:p.fragment,blending:this.blending,transparent:this.transparent,alphaTest:this.alphaTest,depthWrite:this.depthWrite,depthTest:this.depthTest,defines:this.defines,fog:this.fog}),this.geometry=new i.BufferGeometry,this.mesh=new i.Points(this.geometry,this.material),null===this.maxParticleCount&&console.warn("Group: No maxParticleCount specified. Adding emitters after rendering will probably cause errors.")}_updateDefines(){const e=this.emitters;let t;const r=this.defines;for(let i=e.length-1;i>=0;--i)t=e[i],!r.SHOULD_CALCULATE_SPRITE&&Array.isArray(t.angle._value)&&Array.isArray(t.angle._spread)&&(r.SHOULD_ROTATE_TEXTURE=r.SHOULD_ROTATE_TEXTURE||!!Math.max(Math.max.apply(null,t.angle._value),Math.max.apply(null,t.angle._spread))),r.SHOULD_ROTATE_PARTICLES=r.SHOULD_ROTATE_PARTICLES||!!Math.max(t.rotation._angle,t.rotation._angleSpread),r.SHOULD_WIGGLE_PARTICLES=r.SHOULD_WIGGLE_PARTICLES||!!Math.max(t.wiggle._value,t.wiggle._spread);this.material.needsUpdate=!0}_applyAttributesToGeometry(){const e=this.attributes,t=this.geometry,r=t.attributes;let i,a;Object.keys(e).forEach((s=>{i=e[s],a=r[s],a?a.array=i.typedArray.array:i.bufferAttribute&&t.setAttribute(s,i.bufferAttribute),i.bufferAttribute&&(i.bufferAttribute.needsUpdate=!0)})),this.geometry.setDrawRange(0,this.particleCount)}addEmitter(e){if(e instanceof h==!1)return void console.error("`emitter` argument must be instance of Emitter. Was provided with:",e);if(this.emitterIDs.indexOf(e.uuid)>-1)return void console.error("Emitter already exists in this group. Will not add again.");if(null!==e.group)return void console.error("Emitter already belongs to another group. Will not add to requested group.");const t=this.attributes,r=this.particleCount,i=r+e.particleCount;this.particleCount=i,null!==this.maxParticleCount&&this.particleCount>this.maxParticleCount&&console.warn("Group: maxParticleCount exceeded. Requesting",this.particleCount,"particles, can support only",this.maxParticleCount),e._calculatePPSValue(e.maxAge._value+e.maxAge._spread),e._setBufferUpdateRanges(this.attributeKeys),e._setAttributeOffset(r),e.group=this,e.attributes=this.attributes;for(const e in t)t.hasOwnProperty(e)&&t[e]._createBufferAttribute(null!==this.maxParticleCount?this.maxParticleCount:this.particleCount);for(let t=r;t<i;++t)e._assignPositionValue(t),e._assignForceValue(t,"velocity"),e._assignForceValue(t,"acceleration"),e._assignAbsLifetimeValue(t,"opacity"),e._assignAbsLifetimeValue(t,"size"),e._assignAngleValue(t),e._assignRotationValue(t),e._assignParamsValue(t),e._assignColorValue(t);return this._applyAttributesToGeometry(),this.emitters.push(e),this.emitterIDs.push(e.uuid),this._updateDefines(),this.material.needsUpdate=!0,this._attributesNeedRefresh=!0,this}removeEmitter(e){const t=this.emitterIDs.indexOf(e.uuid);if(e instanceof h==!1)return void console.error("`emitter` argument must be instance of Emitter. Was provided with:",e);if(-1===t)return void console.error("Emitter does not exist in this group. Will not remove.");const r=e.attributeOffset,i=r+e.particleCount,a=this.attributes.params.typedArray;for(let e=r;e<i;++e)a&&(a.array[4*e]=0,a.array[4*e+1]=0);this.emitters.splice(t,1),this.emitterIDs.splice(t,1);for(const e in this.attributes)this.attributes.hasOwnProperty(e)&&this.attributes[e].splice(r,i);this.particleCount-=e.particleCount,e._onRemove(),this._attributesNeedRefresh=!0}getFromPool(){const e=this._pool,t=this._createNewWhenPoolEmpty;if(e.length)return e.pop();if(t){if(Array.isArray(this._poolCreationSettings))return console.error("Group: Cannot create new emitter from pool when pool was initialized with an array of options."),null;const e=new h(this._poolCreationSettings);return this.addEmitter(e),e}return null}releaseIntoPool(e){if(e instanceof h!=!1)return e.reset(),this._pool.unshift(e),this;console.error("Argument is not instanceof Emitter:",e)}getPool(){return this._pool}addPool(e,t,r){let i;this._poolCreationSettings=t,this._createNewWhenPoolEmpty=r?1:0;for(let r=0;r<e;++r)i=Array.isArray(t)?new h(t[r]):new h(t),this.addEmitter(i),this.releaseIntoPool(i);return this}_triggerSingleEmitter(e){const t=this.getFromPool();if(null!==t)return t&&(e instanceof i.Vector3&&(t.position._value.copy(e),t.position._value=t.position._value),t.enable(),setTimeout((()=>{t.disable(),this.releaseIntoPool(t)}),1e3*Math.max(t.duration??0,t.maxAge._value+t.maxAge._spread))),this;console.log("Group pool ran out.")}triggerPoolEmitter(e,t){if("number"==typeof e&&e>1)for(let r=0;r<e;++r)this._triggerSingleEmitter(t);else this._triggerSingleEmitter(t);return this}_updateUniforms(e){this.uniforms.runTime.value+=e,this.uniforms.deltaTime.value=e}_resetBufferRanges(){const e=this.attributeKeys,t=this.attributes;let r=this.attributeCount-1;for(;r>=0;--r)t[e[r]].resetUpdateRange()}_updateBuffers(e){const t=this.attributeKeys,r=this.attributes,i=e.bufferUpdateRanges;let a,s,o,n=this.attributeCount-1;for(;n>=0;--n)a=t[n],s=i[a],o=r[a],o.setUpdateRange(s.min,s.max),o.flagUpdate()}update(e){const t=this.emitters,r=t.length,i=e||this.fixedTimeStep,a=this.attributeKeys,s=this.attributes;let o;if(this._updateUniforms(i),this._resetBufferRanges(),0!==r||!1!==this._attributesNeedRefresh||!1!==this._attributesNeedDynamicReset){for(let e,a=0;a<r;++a)e=t[a],e.update(i),this._updateBuffers(e);if(!0===this._attributesNeedDynamicReset){for(o=this.attributeCount-1;o>=0;--o)s[a[o]].resetDynamic();this._attributesNeedDynamicReset=!1}if(!0===this._attributesNeedRefresh){for(o=this.attributeCount-1;o>=0;--o)s[a[o]].forceUpdateAll();this._attributesNeedRefresh=!1,this._attributesNeedDynamicReset=!0}}}dispose(){return this.geometry.dispose(),this.material.dispose(),this}}const f={Group:d,Emitter:h,utils:a,Constants:n};e.Constants=n,e.Emitter=h,e.Group=d,e.SPE=f,e.default=f,e.utils=a,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=shader-particle-system.min.js.map
